{"version":3,"sources":["images/sunnyloading.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","getTheCoords","axios","get","then","theLocation","x","data","setState","theLatitude","latitude","theLongitude","longitude","theCity","city","theRegion","region","theCountry","country","getTheWeather","process","state","theWeather","w","theCurrentWeatherArr","currently","console","log","getTheCuisines","backgroundWeather","catch","error","method","url","headers","theCuisines","cuisines","cuisineList","theCuisinesList","filterTheCuisines","coldFoodArr","hotFoodArr","filteredCuisines","temperature","filter","filtereditem","includes","cuisine","cuisine_name","thefilteredCuisineList","getRandomCuisine","randomNum","Math","floor","random","length","randomCuisineId","randomCuisine","getRestaurants","foodid","cuisine_id","theRestaurants","getRestaurantList","restaurants","loading","showRestaurants","map","eachRestaurant","i","className","key","restaurant","name","handleClick","showfahrenheit","weathericon","icon","weatherBkgd","theTemperature","this","temfahrenheit","round","temcelcius","currentdate","Date","toDateString","src","loadinggif","alt","id","iconId","summary","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0df9f6e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sunnyloading.b0bb43cd.gif\";","import React, { Component } from 'react';\nimport './App.css';\nimport WeatherIcon from 'react-icons-weather';\nimport axios from 'axios';\nimport loadinggif from './images/sunnyloading.gif';\n// import {Link} from 'react-router-dom';\n\n// console.log(\"zomato secret key \",process.env.REACT_APP_ZOMATO_API_KEY);\n// console.log(\"dark sky secret key \",process.env.REACT_APP_DARKSKY_API_KEY);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  this.state = {\n    theLocation: null,\n    theLatitude: null,\n    theLongitude: null,\n    theCity: null,\n    theRegion: null,\n    theCountry: null,\n    theTemperature: null,\n    theCurrentWeatherArr: [],\n    showfahrenheit: false,\n    loading: true,\n    theCuisinesList: [],\n    thefilteredCuisineList: [],\n    randomCuisine: [],\n    getRestaurantList: [],\n    weatherBkgd: null\n  };\n  // console.log(\"Latitude: \" + this.state.theLatitude);\n  // console.log(\"Longitude: \" + this.state.theLongitude);\n}\n\n componentDidMount() {\n\n  this.getTheCoords();\n}\n\n\ngetTheCoords = () => {\n  axios\n  .get(\"https://ipapi.co/json\")\n  .then(theLocation => {\n    // console.log(theLocation.data);\n    let x = theLocation.data;\n    this.setState({\n      theLocation: x,\n      theLatitude: x.latitude,\n      theLongitude: x.longitude,\n      theCity: x.city,\n      theRegion: x.region,\n      theCountry: x.country\n      }, ()=>{\n        this.getTheWeather();\n      })\n    })\n}\n\ngetTheWeather = () => {\n  axios\n  .get(`https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${process.env.REACT_APP_DARKSKY_API_KEY}/${this.state.theLatitude},${this.state.theLongitude}`)\n    .then((theWeather)=>{\n      // console.log(\"this is weather \",theWeather.data) // its because when you do the plus sign its trying to concatenate a string with an object\n      let w = theWeather.data;\n      this.setState({\n        theCurrentWeatherArr: w.currently\n    }, ()=>{\n      console.log(\"this is currently \",this.state.theCurrentWeatherArr)\n      this.getTheCuisines();\n      this.backgroundWeather();\n    });\n  })\n    .catch((error)=>{\n      console.log(error)\n    })\n}\n\ngetTheCuisines = () => {\n    axios({\n      method: \"GET\",\n      url: `https://developers.zomato.com/api/v2.1/cuisines?lat=${this.state.theLatitude}&lon=${this.state.theLongitude}`,\n      headers: {\n        \"user-key\": process.env.REACT_APP_ZOMATO_API_KEY,\n        \"content-type\": \"application/json\"\n      }\n    })\n    .then((theCuisines)=>{\n      console.log(\"this is cuisines \", theCuisines.data.cuisines);\n      let cuisineList = theCuisines.data.cuisines;\n      // let foodname = theCuisines.data.cuisines.map(food => food.cuisine.cuisine_name);\n      // console.log(\"this is cuisines name Array \", foodid);\n      this.setState({\n        theCuisinesList: cuisineList\n    })\n    this.filterTheCuisines();\n    }).catch((error)=>{\n      console.log(error)\n    })\n    // console.log(\"Cuisine List \", this.state.theCuisinesList);\n    // this.getRandomCuisine();\n  }\n\n  filterTheCuisines = () => {\n    let coldFoodArr=[\"Beverages\", \"Bubble Tea\", \"Drinks Only\", \"Frozen Yogurt\", \"Ice Cream\", \"Israeli\", \"Juices\", \"Peruvian\", \"Salad\", \"Seafood\", \"Sushi\", \"Tea\"];\n    let hotFoodArr=[\"BBQ\", \"Beverages\", \"Cajun\", \"Coffee and Tea\", \"Crepes\", \"Dim Sum\", \"Drinks Only\", \"Fondue\", \"Grill\", \"Indian\", \"Mexican\", \"Pizza\", \"Ramen\", \"Seafood\", \"Tea\", \"Thai\"];\n    let temperature = this.state.theCurrentWeatherArr.temperature;\n    let filteredCuisines = [];\n\n    if (temperature >= 80) {\n      filteredCuisines =  this.state.theCuisinesList.filter((filtereditem) => coldFoodArr.includes(filtereditem.cuisine.cuisine_name));\n    } else {\n      filteredCuisines =  this.state.theCuisinesList.filter((filtereditem) => hotFoodArr.includes(filtereditem.cuisine.cuisine_name));\n    }\n    this.setState({\n      thefilteredCuisineList: filteredCuisines\n    });\n    // console.log(\"filtered list\", this.state.thefilteredCuisineList);\n    this.getRandomCuisine();\n  }\n\n  getRandomCuisine = () => {\n    let randomNum = Math.floor(Math.random() * this.state.thefilteredCuisineList.length);\n    let randomCuisineId = this.state.thefilteredCuisineList[randomNum].cuisine;\n    // console.log(\"Random Number \", randomNum);\n    this.setState( { randomCuisine: randomCuisineId } );\n    this.getRestaurants();\n  }\n\n  getRestaurants = () => {\n    let count = 3;\n    let foodid = this.state.randomCuisine.cuisine_id;\n    // let foodname = this.state.randomCuisine.cuisine_name;\n    let radius = 8;\n    axios({\n      method: \"GET\",\n      url: `https://developers.zomato.com/api/v2.1/search?count=${count}&lat=${this.state.theLatitude}&lon=${this.state.theLongitude}&radius=${radius}&cuisines=${foodid}&sort=real_distance&order=asc`,\n      headers: {\n        \"user-key\": process.env.REACT_APP_ZOMATO_API_KEY,\n        \"content-type\": \"application/json\"\n      }\n    })\n    .then((theRestaurants)=>{\n      // console.log(\"this is restaurant list \", theRestaurants.data.restaurants);\n      this.setState({\n        getRestaurantList: theRestaurants.data.restaurants,\n        loading: false\n    })\n    }).catch((error)=>{\n      console.log(error)\n    })\n    // console.log(\"Cuisine List \", this.state.getRestaurantList);\n  }\n\n  showRestaurants = () => {\n    return this.state.getRestaurantList.map((eachRestaurant, i) => {\n      return (<div className=\"card\" key={i}>\n        <h2>{eachRestaurant.restaurant.name}</h2>\n      </div>\n      )\n    })\n  }\n\n  handleClick = () => {\n    this.setState( { showfahrenheit: !this.state.showfahrenheit } );\n  }\n\n  backgroundWeather = () => {\n    let weathericon = this.state.theCurrentWeatherArr.icon || 'cloudy';\n    if(weathericon == \"cloudy\") {\n      this.setState({weatherBkgd: \"cloudy\"})\n    } else if(weathericon == \"rain\") {\n      this.setState({weatherBkgd: \"rain\"})\n    } else if(weathericon == \"clear-day\") {\n      this.setState({weatherBkgd: \"clear-day\"})\n    } else if(weathericon == \"clear-night\") {\n      this.setState({weatherBkgd: \"clear-night\"})\n    } else if(weathericon == \"snow\") {\n      this.setState({weatherBkgd: \"snow\"})\n    } else if(weathericon == \"sleet\") {\n      this.setState({weatherBkgd: \"sleet\"})\n    } else if(weathericon == \"strong-wind\") {\n      this.setState({weatherBkgd: \"strong-wind\"})\n    } else if(weathericon == \"fog\") {\n      this.setState({weatherBkgd: \"fog\"})\n    } else if(weathericon == \"partly-cloudy-day\") {\n      this.setState({weatherBkgd: \"partly-cloudy-day\"})\n    } else if(weathericon == \"partly-cloudy-night\") {\n      this.setState({weatherBkgd: \"partly-cloudy-night\"})\n    } else if(weathericon == \"hail\") {\n      this.setState({weatherBkgd: \"hail\"})\n    } else if(weathericon == \"tornado\") {\n      this.setState({weatherBkgd: \"tornado\"})\n    } else if(weathericon == \"thunderstorm\") {\n      this.setState({weatherBkgd: \"thunderstorm\"})\n    }\n  }\n\n  render () {\n    let temfahrenheit = Math.round(this.state.theCurrentWeatherArr.temperature);\n    let temcelcius = Math.round((temfahrenheit - 32) * 5/9);\n    let weathericon = this.state.theCurrentWeatherArr.icon || 'cloudy';\n    console.log(\"weather icon\", weathericon);\n    // let months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    // let day_arr = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n    // let timecode = this.state.theCurrentArr.time;\n    // let datetime = new Date(timecode*1000);\n    // let yeartime = datetime.getFullYear();\n    // let monthtime = months_arr[datetime.getMonth()];\n    // var daytime = datetime.getDate();\n    let date = new Date();\n    let currentdate = date.toDateString();\n    // let currentday = day_arr[date.getDay()];\n    // let currentMonth = months_arr[date.getMonth()];\n    // let currentYear = date.getFullYear();\n\n\n    // console.log(\"This is date \" +  currentdate);\n    // console.log(\"Cuisine List \", this.state.theCuisinesList.length);\n    // console.log(\"random cuisine\", this.state.randomCuisine.cuisine_name);\n\n  return (\n    <div className=\"App\">\n     {this.state.loading ?\n        <div className=\"loading\"><h2>Local Weather</h2><img src={loadinggif} alt=\"\" /></div> :\n    <div className={`wrapper ${this.state.weatherBkgd}`}>\n      <div className=\"container\">\n        <div className=\"weatherbox\">\n          <div className=\"locationbox\">\n            <div className=\"locactioninfobox\">\n              <div className=\"cityarea\">\n                <h2 id=\"cityname\">{this.state.theCity}</h2>\n              </div>\n              <div className=\"countryarea\">\n                <h3 id=\"state\">{this.state.theRegion}</h3>\n                <h3 id=\"country\">{this.state.theCountry}</h3>\n              </div>\n              <div className=\"countryarea\">\n                <h3>{currentdate}</h3>\n              </div>\n            </div>\n          </div>\n          <div className=\"temperaturearea\">\n          <div className=\"toptempbox\">\n            <div className=\"tempbox\">\n              <span id=\"temp\">{this.state.showfahrenheit ? temcelcius : temfahrenheit }</span>\n            </div>\n            <div className=\"wconditionsbox\">\n              <span id=\"wparameter\"><WeatherIcon name=\"darksky\" iconId={weathericon} /></span>\n              <span id=\"wdescription\">{this.state.theCurrentWeatherArr.summary}</span>\n            </div>\n          </div>\n          <div className=\"weather main-toggle\">\n            <span>F</span>\n            <button id=\"unit-switch\" onClick = {this.handleClick}><span id=\"unit-toggle\" className= {this.state.showfahrenheit ? \"toggle\" : \"\" }></span></button>\n            <span>C</span>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div className=\"cuisine-suggestion\">\n      <h3>{temfahrenheit >= 80 ? \"Keep cool with \" : \"Stay warm with \" }<span>{this.state.randomCuisine.cuisine_name}</span>?</h3>\n      <div>\n      {this.showRestaurants()}\n      </div>\n  </div>\n  </div>\n     }\n  </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}