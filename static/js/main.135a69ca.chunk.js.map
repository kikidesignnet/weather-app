{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleClick","setState","showfahrenheit","state","theLocation","theLatitude","theLongitude","theCity","theRegion","theCountry","theCurrentArr","loading","console","log","axios","get","then","data","x","latitude","longitude","city","region","country","process","theWeather","w","currently","catch","error","err","this","getCoords","temfahrenheit","Math","round","temperature","temcelcius","weathericon","icon","date","Date","currentdate","toDateString","getDay","getMonth","getFullYear","className","id","name","iconId","summary","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.135a69ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport WeatherIcon from 'react-icons-weather';\nimport axios from 'axios';\nimport {Switch, Link, Route} from 'react-router-dom';\n\n// console.log(\"zomato secret key \",process.env.REACT_APP_ZOMATO_API_KEY);\n// console.log(\"dark sky secret key \",process.env.REACT_APP_DARKSKY_API_KEY);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  this.state = {\n    theLocation: null,\n    theLatitude: null,\n    theLongitude: null,\n    theCity: null,\n    theRegion: null,\n    theCountry: null,\n    theCurrentArr: [],\n    showfahrenheit: false,\n    loading: true\n  };\n   console.log(\"Latitude: \" + this.state.theLatitude);\n        console.log(\"Longitude: \" + this.state.theLongitude);\n}\ngetCoords() {\n  axios\n  .get(\"https://ipapi.co/json\")\n  .then(theLocation => {\n    console.log(theLocation.data);\n    let x = theLocation.data;\n    this.setState({\n      theLocation: x,\n      theLatitude: x.latitude,\n      theLongitude: x.longitude,\n      theCity: x.city,\n      theRegion: x.region,\n      theCountry: x.country\n      }, ()=>{\n      axios\n      .get(`https://api.darksky.net/forecast/${process.env.REACT_APP_DARKSKY_API_KEY}/${this.state.theLatitude},${this.state.theLongitude}`)\n      // ({\n      //   \"method\":\"GET\",\n      //   \"url\":`https://api.darksky.net/forecast/${process.env.REACT_APP_DARKSKY_API_KEY}/${this.state.theLatitude},${this.state.theLongitude}`,\n      //   \"headers\":{\n      //   \"content-type\":\"application/octet-stream\",\n      //   \"x-rapidapi-host\":\"dark-sky.p.rapidapi.com\",\n      //   \"x-rapidapi-key\":\"760ca9a747msh1f850753dd5051dp18ed6ejsn69eadb449124\"\n      //   },\"params\":{\n      //   \"lang\":\"en\",\n      //   \"units\":\"auto\"\n      //   }\n      //   })\n        .then((theWeather)=>{\n          console.log(\"this is weather \",theWeather.data) // its because when you do the plus sign its trying to concatenate a string with an object\n          let w = theWeather.data;\n          this.setState({\n            theCurrentArr: w.currently,\n            loading: false\n        }, ()=>{\n          console.log(\"this is currently \",this.state.theCurrentArr)\n        });\n      })\n        .catch((error)=>{\n          console.log(error)\n        })\n    }\n    );\n    console.log(\"Latitude: \" + this.state.theLatitude);\n    console.log(\"Longitude: \" + this.state.theLongitude);\n    \n  })\n  .catch(err => {\n    console.log(err);\n  });\n}\n\n  componentDidMount() {\n    this.getCoords();\n    \n  }\n  handleClick = () => {\n    this.setState( { showfahrenheit : !this.state.showfahrenheit } );\n  }\n\n  render () {\n    let temfahrenheit = Math.round(this.state.theCurrentArr.temperature);\n    let temcelcius = Math.round((temfahrenheit - 32) * 5/9);\n    let weathericon = this.state.theCurrentArr.icon || 'cloudy';\n    let months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    let day_arr = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n    // let timecode = this.state.theCurrentArr.time;\n    // let datetime = new Date(timecode*1000);\n    // let yeartime = datetime.getFullYear();\n    // let monthtime = months_arr[datetime.getMonth()];\n    // var daytime = datetime.getDate();\n    let date = new Date();\n    let currentdate = date.toDateString();\n    let currentday = day_arr[date.getDay()];\n    let currentMonth = months_arr[date.getMonth()];\n    let currentYear = date.getFullYear();\n\n\n    console.log(\"This is date \" +  currentdate);\n\n  return (\n    <div className=\"App\">\n     {\n        this.state.loading ?\n        <div className=\"loading\"><p>loading...</p></div> :\n    <div className=\"wrapper\">\n      <div className=\"container\">\n        <div className=\"header\"><h1>Local Weather</h1></div>\n        <div className=\"weatherbox\">\n          <div className=\"locationbox\">\n            <div className=\"locactioninfobox\">\n              <div className=\"cityarea\">\n                <h2 id=\"cityname\">{this.state.theCity}</h2>\n              </div>\n              <div className=\"countryarea\">\n                <h3 id=\"state\">{this.state.theRegion}</h3>\n                <h3 id=\"country\">{this.state.theCountry}</h3>\n              </div>\n              <div className=\"countryarea\">\n                <h3>{currentdate}</h3>\n              </div>\n            </div>\n          </div>\n          <div className=\"temperaturearea\">\n          <div className=\"toptempbox\">\n            <div className=\"tempbox\">\n              <span id=\"temp\">{this.state.showfahrenheit ? temcelcius : temfahrenheit }</span>\n            </div>\n            <div className=\"wconditionsbox\">\n              <span id=\"wparameter\"><WeatherIcon name=\"darksky\" iconId={weathericon} /></span>\n              <span id=\"wdescription\">{this.state.theCurrentArr.summary}</span>\n            </div>\n          </div>\n          <div className=\"weather main-toggle\">\n            <span>F</span>\n            <button id=\"unit-switch\" onClick = {this.handleClick}><span id=\"unit-toggle\" className= {this.state.showfahrenheit ? \"toggle\" : \"\" }></span></button>\n            <span>C</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n     }\n  </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}