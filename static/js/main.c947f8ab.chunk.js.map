{"version":3,"sources":["images/sunnyloading.gif","images/restaurant-thumbnail.jpg","components/rating.js","components/dollarrate.js","Home.js","api/zomato.js","components/restaurant-detail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Rating","starPercentage","this","props","children","starPercentageRounded","Math","round","className","style","width","Component","DollarRate","showDollarSign","signs","Array","fill","Home","getTheCoords","axios","get","then","theLocation","x","data","setState","theLatitude","latitude","theLongitude","longitude","theCity","city","theRegion","region","theCountry","country","getTheWeather","urldarksky","process","state","theWeather","console","log","w","theCurrentWeatherArr","currently","theForecastArr","daily","getTheCuisines","backgroundWeather","catch","error","showForecast","newFArr","shift","map","eachDay","i","fweathericon","icon","day_arr","timecode","time","currentday","Date","getDay","indexOf","hightemfahrenheit","apparentTemperatureHigh","lowtemfahrenheit","apparentTemperatureLow","key","name","iconId","id","method","url","headers","theCuisines","cuisineList","cuisines","theCuisinesList","filterTheCuisines","coldFoodArr","hotFoodArr","filteredCuisines","temperature","filter","filtereditem","includes","cuisine","cuisine_name","thefilteredCuisineList","getRandomCuisine","randomNum","floor","random","length","randomCuisineId","randomCuisine","getRestaurants","foodid","cuisine_id","theRestaurants","getRestaurantList","restaurants","loading","showRestaurants","eachRestaurant","to","restaurant","src","thumb","restaurantthumb","alt","user_rating","aggregate_rating","rating_text","location","address","price_range","handleClick","showfahrenheit","weathericon","weatherBkgd","theTemperature","showRestaurantImage","temfahrenheit","temcelcius","currentdate","toDateString","loadinggif","summary","onClick","create","baseURL","RestaurantDetail","_goToLocation","window","open","specificRestaurant","restaurantId","match","params","zomato","aria-hidden","href","phone_numbers","target","rel","App","exact","path","render","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c947f8ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sunnyloading.b0bb43cd.gif\";","module.exports = __webpack_public_path__ + \"static/media/restaurant-thumbnail.9cf78a2e.jpg\";","import React, { Component } from 'react'\n\nexport class Rating extends Component {\n  \n\n  render() {\n    const starTotal = 5;\n    let starPercentage = (this.props.children / starTotal) * 100;\n    // console.log(\"rating\", this.props.children);\n    // console.log(\"percentage rating\", starPercentage);\n    let starPercentageRounded = `${(Math.round(starPercentage / 10) * 10)}%`;\n    // console.log(\"percentage rounded rating\", starPercentageRounded);\n  \n    return (\n      <span className=\"stars-outer\">\n          <span className=\"stars-inner\" style={{width: `${starPercentageRounded}`}} ></span>\n        </span>\n    )\n  }\n}\n\n\n\nexport default Rating\n\n\n","import React, { Component } from 'react'\n\nexport class DollarRate extends Component {\n\n  showDollarSign = () => {\n    let signs = this.props.children;\n    let filledArray = new Array(signs).fill('$');\n    return filledArray;\n  }\n\n  render() {\n    return (\n      <span>\n        {this.showDollarSign()}\n      </span>\n    )\n  }\n}\n\nexport default DollarRate\n","import React, { Component } from 'react';\nimport './App.css';\nimport WeatherIcon from 'react-icons-weather';\nimport axios from 'axios';\nimport loadinggif from './images/sunnyloading.gif';\nimport restaurantthumb from './images/restaurant-thumbnail.jpg';\nimport Rating from './components/rating';\nimport DollarRate from './components/dollarrate';\nimport {Link} from 'react-router-dom';\n// import RestaurantDetail from './components/restaurant-detail';\n\n// console.log(\"zomato secret key \",process.env.REACT_APP_ZOMATO_API_KEY);\n// console.log(\"dark sky secret key \",process.env.REACT_APP_DARKSKY_API_KEY);\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n  this.state = {\n    theLocation: null,\n    theLatitude: null,\n    theLongitude: null,\n    theCity: null,\n    theRegion: null,\n    theCountry: null,\n    theTemperature: null,\n    theCurrentWeatherArr: [],\n    theForecastArr:[],\n    showfahrenheit: false,\n    loading: true,\n    theCuisinesList: [],\n    thefilteredCuisineList: [],\n    randomCuisine: [],\n    getRestaurantList: [],\n    weatherBkgd: null,\n    showRestaurantImage: \"\"\n  };\n  // console.log(\"Latitude: \" + this.state.theLatitude);\n  // console.log(\"Longitude: \" + this.state.theLongitude);\n}\n\n componentDidMount() {\n\n  this.getTheCoords();\n}\n\n\ngetTheCoords = () => {\n  axios\n  .get(\"https://ipapi.co/json\")\n  .then(theLocation => {\n    // console.log(theLocation.data);\n    let x = theLocation.data;\n    this.setState({\n      theLocation: x,\n      theLatitude: x.latitude,\n      theLongitude: x.longitude,\n      theCity: x.city,\n      theRegion: x.region,\n      theCountry: x.country\n      }, ()=>{\n        this.getTheWeather();\n      })\n    })\n}\n\ngetTheWeather = () => {\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  const urldarksky = `https://api.darksky.net/forecast/${process.env.REACT_APP_DARKSKY_API_KEY}/${this.state.theLatitude},${this.state.theLongitude}`;\n  axios\n  .get(proxyurl + urldarksky)\n    .then((theWeather)=>{\n      console.log(\"this is weather \",theWeather.data);\n      let w = theWeather.data;\n      this.setState({\n        theCurrentWeatherArr: w.currently,\n        theForecastArr: w.daily.data\n    }, ()=>{\n      console.log(\"this is currently \",this.state.theCurrentWeatherArr)\n      console.log(\"this is daily \",this.state.theForecastArr)\n      this.getTheCuisines();\n      this.backgroundWeather();\n    });\n  })\n    .catch((error)=>{\n      console.log(error)\n    })\n}\nshowForecast = () => {\n  let newFArr = [...this.state.theForecastArr];\n  newFArr.shift();\n  return newFArr.map((eachDay, i) => {\n    // console.log(eachDay)\n    let fweathericon = eachDay.icon || 'cloudy';\n    let day_arr = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n    let timecode = eachDay.time;\n    let datetime = new Date(timecode*1000);\n    let currentday =  day_arr[datetime.getDay()];\n\n    if(new Date().getDay() + 1 === day_arr.indexOf(currentday)){\n      currentday = 'Tomorrow'\n    }\n    let hightemfahrenheit = Math.round(eachDay.apparentTemperatureHigh);\n    let lowtemfahrenheit = Math.round(eachDay.apparentTemperatureLow);\n    return (<div className=\"daycard\" key={i}>\n      <h2>{currentday}</h2>\n      <div className=\"fdetails\">\n      <WeatherIcon name=\"darksky\" iconId={fweathericon} />\n      <h3><span id=\"highlowtemp\">{hightemfahrenheit}</span> / <span id=\"highlowtemp\">{lowtemfahrenheit}</span></h3>\n      </div>\n      </div>\n    )\n  })\n}\n\ngetTheCuisines = () => {\n    axios({\n      method: \"GET\",\n      url: `https://developers.zomato.com/api/v2.1/cuisines?lat=${this.state.theLatitude}&lon=${this.state.theLongitude}`,\n      headers: {\n        \"user-key\": process.env.REACT_APP_ZOMATO_API_KEY,\n        \"content-type\": \"application/json\"\n      }\n    })\n    .then((theCuisines)=>{\n      // console.log(\"this is cuisines \", theCuisines.data.cuisines);\n      let cuisineList = theCuisines.data.cuisines;\n      // let foodname = theCuisines.data.cuisines.map(food => food.cuisine.cuisine_name);\n      // console.log(\"this is cuisines name Array \", foodid);\n      this.setState({\n        theCuisinesList: cuisineList\n    })\n    this.filterTheCuisines();\n    }).catch((error)=>{\n      console.log(error)\n    })\n    // console.log(\"Cuisine List \", this.state.theCuisinesList);\n    // this.getRandomCuisine();\n  }\n\n  filterTheCuisines = () => {\n    let coldFoodArr=[\"Beverages\", \"Bubble Tea\", \"Drinks Only\", \"Frozen Yogurt\", \"Ice Cream\", \"Israeli\", \"Juices\", \"Peruvian\", \"Salad\", \"Seafood\", \"Sushi\", \"Tea\"];\n    let hotFoodArr=[\"BBQ\", \"Beverages\", \"Cajun\", \"Coffee and Tea\", \"Crepes\", \"Dim Sum\", \"Drinks Only\", \"Grill\", \"Indian\", \"Mexican\", \"Pizza\", \"Ramen\", \"Seafood\", \"Tea\", \"Thai\"];\n    let temperature = this.state.theCurrentWeatherArr.temperature;\n    let filteredCuisines = [];\n\n    if (temperature >= 80) {\n      filteredCuisines =  this.state.theCuisinesList.filter((filtereditem) => coldFoodArr.includes(filtereditem.cuisine.cuisine_name));\n    } else {\n      filteredCuisines =  this.state.theCuisinesList.filter((filtereditem) => hotFoodArr.includes(filtereditem.cuisine.cuisine_name));\n    }\n    this.setState({\n      thefilteredCuisineList: filteredCuisines\n    });\n    // console.log(\"filtered list\", this.state.thefilteredCuisineList);\n    this.getRandomCuisine();\n  }\n\n  getRandomCuisine = () => {\n    let randomNum = Math.floor(Math.random() * this.state.thefilteredCuisineList.length);\n    let randomCuisineId = this.state.thefilteredCuisineList[randomNum].cuisine;\n    // console.log(\"Random Number \", randomNum);\n    this.setState( { randomCuisine: randomCuisineId } );\n    this.getRestaurants();\n  }\n\n  getRestaurants = () => {\n    let count = 3;\n    let foodid = this.state.randomCuisine.cuisine_id;\n    // let foodname = this.state.randomCuisine.cuisine_name;\n    let radius = 10;\n    axios({\n      method: \"GET\",\n      url: `https://developers.zomato.com/api/v2.1/search?count=${count}&lat=${this.state.theLatitude}&lon=${this.state.theLongitude}&radius=${radius}&cuisines=${foodid}&sort=real_distance&order=desc`,\n      headers: {\n        \"user-key\": process.env.REACT_APP_ZOMATO_API_KEY,\n        \"content-type\": \"application/json\"\n      }\n    })\n    .then((theRestaurants)=>{\n      // console.log(\"this is restaurant list \", theRestaurants.data.restaurants);\n      this.setState({\n        getRestaurantList: theRestaurants.data.restaurants,\n        loading: false\n    })\n    }).catch((error)=>{\n      console.log(error)\n    })\n    // console.log(\"Cuisine List \", this.state.getRestaurantList);\n  }\n\n  showRestaurants = () => {\n    return this.state.getRestaurantList.map((eachRestaurant, i) => {\n      return (<Link className=\"card\" key={i} to={`/restaurant-detail/${eachRestaurant.restaurant.id}`}>\n        <div className=\"restaurantimg\">\n          <img src={eachRestaurant.restaurant.thumb === \"\" ? restaurantthumb : eachRestaurant.restaurant.thumb} alt=\"\" />\n        </div>\n        <div className=\"restaurant-details\">\n          <h2>{eachRestaurant.restaurant.name} <Rating>{eachRestaurant.restaurant.user_rating.aggregate_rating}</Rating><span className=\"ratingtext\">({eachRestaurant.restaurant.user_rating.rating_text})</span></h2>\n          <h3>{eachRestaurant.restaurant.location.address}</h3>\n          <h4><DollarRate>{eachRestaurant.restaurant.price_range}</DollarRate></h4>\n        </div>\n        </Link>\n      )\n    })\n  }\n\n  handleClick = () => {\n    this.setState( { showfahrenheit: !this.state.showfahrenheit } );\n  }\n\n  backgroundWeather = () => {\n    let weathericon = this.state.theCurrentWeatherArr.icon || 'cloudy';\n    if(weathericon === \"cloudy\") {\n      this.setState({weatherBkgd: \"cloudy\"})\n    } else if(weathericon === \"rain\") {\n      this.setState({weatherBkgd: \"rain\"})\n    } else if(weathericon === \"clear-day\") {\n      this.setState({weatherBkgd: \"clear-day\"})\n    } else if(weathericon === \"clear-night\") {\n      this.setState({weatherBkgd: \"clear-night\"})\n    } else if(weathericon === \"snow\") {\n      this.setState({weatherBkgd: \"snow\"})\n    } else if(weathericon === \"sleet\") {\n      this.setState({weatherBkgd: \"sleet\"})\n    } else if(weathericon === \"strong-wind\") {\n      this.setState({weatherBkgd: \"strong-wind\"})\n    } else if(weathericon === \"fog\") {\n      this.setState({weatherBkgd: \"fog\"})\n    } else if(weathericon === \"partly-cloudy-day\") {\n      this.setState({weatherBkgd: \"partly-cloudy-day\"})\n    } else if(weathericon === \"partly-cloudy-night\") {\n      this.setState({weatherBkgd: \"partly-cloudy-night\"})\n    } else if(weathericon === \"hail\") {\n      this.setState({weatherBkgd: \"hail\"})\n    } else if(weathericon === \"tornado\") {\n      this.setState({weatherBkgd: \"tornado\"})\n    } else if(weathericon === \"thunderstorm\") {\n      this.setState({weatherBkgd: \"thunderstorm\"})\n    }\n  }\n\n  render () {\n    let temfahrenheit = Math.round(this.state.theCurrentWeatherArr.temperature);\n    let temcelcius = Math.round((temfahrenheit - 32) * 5/9);\n    let weathericon = this.state.theCurrentWeatherArr.icon || 'cloudy';\n    // console.log(\"weather icon\", weathericon);\n    // let months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    // let day_arr = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n    // let timecode = this.state.theCurrentArr.time;\n    // let datetime = new Date(timecode*1000);\n    // let yeartime = datetime.getFullYear();\n    // let monthtime = months_arr[datetime.getMonth()];\n    // var daytime = datetime.getDate();\n    let date = new Date();\n    let currentdate = date.toDateString();\n    // let currentday = day_arr[date.getDay()];\n    // let currentMonth = months_arr[date.getMonth()];\n    // let currentYear = date.getFullYear();\n\n\n    // console.log(\"This is date \" +  currentdate);\n    // console.log(\"Cuisine List \", this.state.theCuisinesList.length);\n    // console.log(\"random cuisine\", this.state.randomCuisine.cuisine_name);\n\n  return (\n    \n     this.state.loading ?\n        <div className=\"loading\"><h2>Local Weather</h2><img src={loadinggif} alt=\"\" /></div> :\n    <div className={`wrapper ${this.state.weatherBkgd}`}>\n      <div className=\"container\">\n        <div className=\"weatherbox\">\n        <div className=\"temperaturebox\">\n          <div className=\"locationbox\">\n            <div className=\"datebox\">\n                <h3>{currentdate}</h3>\n            </div>\n            <div className=\"locactioninfobox\">\n              <div className=\"cityarea\">\n                <h2 id=\"cityname\">{this.state.theCity}</h2>\n              </div>\n              <div className=\"countryarea\">\n                <h3 id=\"state\">{this.state.theRegion}</h3>\n                <h3 id=\"country\">{this.state.theCountry}</h3>\n              </div>\n            </div>\n          </div>\n          <div className=\"temperaturearea\">\n          <div className=\"toptempbox\">\n            <div className=\"tempbox\">\n              <span id=\"temp\">{this.state.showfahrenheit ? temcelcius : temfahrenheit }</span>\n            </div>\n            <div className=\"wconditionsbox\">\n              <span id=\"wparameter\"><WeatherIcon name=\"darksky\" iconId={weathericon} /></span>\n              <span id=\"wdescription\">{this.state.theCurrentWeatherArr.summary}</span>\n            </div>\n          </div>\n          <div className=\"weather main-toggle\">\n            <span>F</span>\n            <button id=\"unit-switch\" onClick = {this.handleClick}><span id=\"unit-toggle\" className= {this.state.showfahrenheit ? \"toggle\" : \"\" }></span></button>\n            <span>C</span>\n          </div>\n        </div>\n        </div>\n        <div className=\"forecastbox\">\n        {this.showForecast()}\n        </div>\n      </div>\n    </div>\n    <div className=\"cuisine-suggestion\">\n      <h3 className=\"cuisine-text\">{temfahrenheit >= 80 ? \"Keep cool with \" : \"Stay warm with \" }<span>{this.state.randomCuisine.cuisine_name}</span> ?</h3>\n      <div className=\"restaurant-box\">\n      <h4 className=\"radius-text\">Within 10 miles</h4>\n      {this.showRestaurants()}\n      </div>\n  </div>\n\n  </div>\n     \n  );\n}\n}\n\nexport default Home;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://developers.zomato.com/api/v2.1',\n  headers: {\n    'user-key': process.env.REACT_APP_ZOMATO_API_KEY\n  }\n});","import React, { Component } from 'react';\nimport loadinggif from '../images/sunnyloading.gif';\nimport {Link} from 'react-router-dom';\nimport zomato from '../api/zomato';\nimport restaurantthumb from '../images/restaurant-thumbnail.jpg';\nimport Rating from './rating';\nimport DollarRate from './dollarrate';\n// import { withScriptjs, withGoogleMap, GoogleMap, DirectionsRenderer } from 'react-google-maps';\n// import Map from './Map';\n\n// const MapLoader = withScriptjs(Map);\n\nexport class RestaurantDetail extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      specificRestaurant: {},\n      loading: true,\n    }\n  }\n  async componentDidMount() {\n    const restaurantId = this.props.match.params.restaurantId;\n    // console.log(\"detail restaurant: \", restaurantId);\n    // \"zomato://restaurant/16937130\"\n    const {data} = await zomato.get(`/restaurant?res_id=${restaurantId}`)\n    this.setState({\n      specificRestaurant: data,\n      loading: false\n    })\n  }\n\n  _goToLocation = () => {\n    window.open(`https://www.google.com/maps/search/?api=1&query=${this.state.specificRestaurant.name}`)\n    \n    //${this.state.specificRestaurant.location.latitude},${this.state.specificRestaurant.location.longitude}`)\n  }\n  render() {\n    // console.log(\"detail state restaurant: \", this.state.specificRestaurant);\n    return (\n      this.state.loading ?\n        <div className=\"loading\"><h2>Local Weather</h2><img src={loadinggif} alt=\"\" /></div> :\n        <div className=\"wrapper2 restaurantbkgd\">\n      <Link className=\"homeback\" to=\"/\"><i className=\"fa fa-arrow-circle-left\" aria-hidden=\"true\"></i> Home</Link>\n      <div className=\"container2\">\n      <div className=\"restaurantbox\">\n        <div className=\"restaurantimg\">\n          <img src={this.state.specificRestaurant.thumb === \"\" ? restaurantthumb : this.state.specificRestaurant.thumb} alt=\"\" />\n        </div>\n        <div className=\"single-restaurant-details\">\n          <h2>{this.state.specificRestaurant.name} <Rating>{this.state.specificRestaurant.user_rating.aggregate_rating}</Rating><span className=\"ratingtext\">({this.state.specificRestaurant.user_rating.rating_text})</span></h2>\n          <h3 className=\"raddress\">{this.state.specificRestaurant.location.address}</h3>\n          <div className=\"restaurant-labels\">\n            <div className=\"rbox rphone\">\n              <h3><strong>Phone</strong></h3>\n              <a href={`tel:${this.state.specificRestaurant.phone_numbers}`}>{this.state.specificRestaurant.phone_numbers}</a>\n            </div>\n            <div className=\"rbox rprice\">\n              <h3><strong>Price</strong></h3>\n              <h3><span><DollarRate>{this.state.specificRestaurant.price_range}</DollarRate></span></h3>\n            </div>\n            <div className=\"rbox rcuisines\">\n              <h3><strong>Cuisines</strong></h3>\n              <h3>{this.state.specificRestaurant.cuisines}</h3>\n            </div>\n          </div>\n          <div className=\"rlinks\">\n            <div className=\"rlinkbox directionbtn\">\n              <h3><strong>Find Direction</strong></h3>\n              <button onClick={this._goToLocation}>Find Directions</button>\n            </div>\n            <div className=\"rlinkbox zomatobtn\">\n              <h3><strong>More Details</strong></h3>\n              <a href={this.state.specificRestaurant.url} target=\"_blank\" rel=\"noopener noreferrer\">Open in Zomato</a>\n            </div>\n          </div>\n          {/* <MapLoader\n              googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=\"\n              loadingElement={<div style={{ height: `100%` }} />}\n            /> */}\n        </div>\n        </div>\n      </div>\n      </div>\n      \n    )\n  }\n}\n\nexport default RestaurantDetail\n","import React, { Component } from 'react'\nimport {Switch, Route} from 'react-router-dom';\nimport Home from './Home'\nimport RestaurantDetail from './components/restaurant-detail'\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" render={props=> (<Home {...props} />)}  />\n          <Route exact path=\"/restaurant-detail/:restaurantId\" render={props => (<RestaurantDetail {...props} />)}  />\n      </Switch>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\n// import 'fontawesome';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n  <HashRouter>\n      <App />\n  </HashRouter>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}